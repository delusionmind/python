Base Case: The function starts with a base case where it checks if the length of the array arr is greater than 1. If it's not, then the array is already sorted, so there's no need to do anything. This base case is important for the recursion to terminate.


if len(arr) > 1:



Splitting the Array: If the array has more than one element, the function calculates the middle index mid of the array and splits the array into two halves - L and R.


mid = len(arr) // 2
L = arr[:mid]
R = arr[mid:]



Recursion: The function recursively calls itself on the left half (L) and the right half (R) of the array.


merge_sort(L)
merge_sort(R)



Merging: Once the left and right halves are sorted individually, the function merges them back together. It initializes three pointers i, j, and k to 0.


i = j = k = 0



Comparing and Merging: It then iterates through both halves (L and R) and compares elements at the corresponding indices. It selects the smaller element among the two and places it in the original array arr.


while i < len(L) and j < len(R):
    if L[i] < R[j]:
        arr[k] = L[i]
        i += 1
    else:
        arr[k] = R[j]
        j += 1
    k += 1


Handling Remaining Elements: After the above loop, if there are any remaining elements in either L or R, they are added to the end of the sorted array arr.


while i < len(L):
    arr[k] = L[i]
    i += 1
    k += 1

while j < len(R):
    arr[k] = R[j]
    j += 1
    k += 1




Return: Finally, the sorted array arr is returned.

This process continues recursively until all the elements are sorted. The key idea of merge sort is to divide the array into smaller subarrays, sort them individually, and then merge them back together in a sorted manner.





